#pragma once

#include <cstddef>

namespace cs2_dumper {
    namespace offsets {
        // Module: client.dll
        namespace client_dll {
            constexpr std::ptrdiff_t dwCSGOInput = 0x1A75250;
            constexpr std::ptrdiff_t dwEntityList = 0x1A020A8;
            constexpr std::ptrdiff_t dwGameEntitySystem = 0x1B25BD8;
            constexpr std::ptrdiff_t dwGameEntitySystem_highestEntityIndex = 0x20F0;
            constexpr std::ptrdiff_t dwGameRules = 0x1A66B38;
            constexpr std::ptrdiff_t dwGlobalVars = 0x1849EB0;
            constexpr std::ptrdiff_t dwGlowManager = 0x1A66270;
            constexpr std::ptrdiff_t dwLocalPlayerController = 0x1A50AD0;
            constexpr std::ptrdiff_t dwLocalPlayerPawn = 0x18560D0;
            constexpr std::ptrdiff_t dwPlantedC4 = 0x1A702F8;
            constexpr std::ptrdiff_t dwPrediction = 0x1855F50;
            constexpr std::ptrdiff_t dwSensitivity = 0x1A67858;
            constexpr std::ptrdiff_t dwSensitivity_sensitivity = 0x40;
            constexpr std::ptrdiff_t dwViewAngles = 0x1A75620;
            constexpr std::ptrdiff_t dwViewMatrix = 0x1A6B230;
            constexpr std::ptrdiff_t dwViewRender = 0x1A6BB80;
            constexpr std::ptrdiff_t dwWeaponC4 = 0x1A04590;
        }
        namespace CBasePlayerController {
                constexpr std::ptrdiff_t m_nFinalPredictedTick = 0x570; // int32
                constexpr std::ptrdiff_t m_CommandContext = 0x578; // C_CommandContext
                constexpr std::ptrdiff_t m_nInButtonsWhichAreToggles = 0x620; // uint64
                constexpr std::ptrdiff_t m_nTickBase = 0x628; // uint32
                constexpr std::ptrdiff_t m_hPawn = 0x62C; // CHandle<C_BasePlayerPawn>
                constexpr std::ptrdiff_t m_bKnownTeamMismatch = 0x630; // bool
                constexpr std::ptrdiff_t m_hPredictedPawn = 0x634; // CHandle<C_BasePlayerPawn>
                constexpr std::ptrdiff_t m_nSplitScreenSlot = 0x638; // CSplitScreenSlot
                constexpr std::ptrdiff_t m_hSplitOwner = 0x63C; // CHandle<CBasePlayerController>
                constexpr std::ptrdiff_t m_hSplitScreenPlayers = 0x640; // CUtlVector<CHandle<CBasePlayerController>>
                constexpr std::ptrdiff_t m_bIsHLTV = 0x658; // bool
                constexpr std::ptrdiff_t m_iConnected = 0x65C; // PlayerConnectedState
                constexpr std::ptrdiff_t m_iszPlayerName = 0x660; // char[128]
                constexpr std::ptrdiff_t m_steamID = 0x6E8; // uint64
                constexpr std::ptrdiff_t m_bIsLocalPlayerController = 0x6F0; // bool
                constexpr std::ptrdiff_t m_iDesiredFOV = 0x6F4; // uint32
            }
        namespace C_BaseEntity {
                constexpr std::ptrdiff_t m_CBodyComponent = 0x38; // CBodyComponent*
                constexpr std::ptrdiff_t m_NetworkTransmitComponent = 0x40; // CNetworkTransmitComponent
                constexpr std::ptrdiff_t m_nLastThinkTick = 0x320; // GameTick_t
                constexpr std::ptrdiff_t m_pGameSceneNode = 0x328; // CGameSceneNode*
                constexpr std::ptrdiff_t m_pRenderComponent = 0x330; // CRenderComponent*
                constexpr std::ptrdiff_t m_pCollision = 0x338; // CCollisionProperty*
                constexpr std::ptrdiff_t m_iMaxHealth = 0x340; // int32
                constexpr std::ptrdiff_t m_iHealth = 0x344; // int32
                constexpr std::ptrdiff_t m_lifeState = 0x348; // uint8
                constexpr std::ptrdiff_t m_bTakesDamage = 0x349; // bool
                constexpr std::ptrdiff_t m_nTakeDamageFlags = 0x350; // TakeDamageFlags_t
                constexpr std::ptrdiff_t m_nPlatformType = 0x358; // EntityPlatformTypes_t
                constexpr std::ptrdiff_t m_ubInterpolationFrame = 0x359; // uint8
                constexpr std::ptrdiff_t m_hSceneObjectController = 0x35C; // CHandle<C_BaseEntity>
                constexpr std::ptrdiff_t m_nNoInterpolationTick = 0x360; // int32
                constexpr std::ptrdiff_t m_nVisibilityNoInterpolationTick = 0x364; // int32
                constexpr std::ptrdiff_t m_flProxyRandomValue = 0x368; // float32
                constexpr std::ptrdiff_t m_iEFlags = 0x36C; // int32
                constexpr std::ptrdiff_t m_nWaterType = 0x370; // uint8
                constexpr std::ptrdiff_t m_bInterpolateEvenWithNoModel = 0x371; // bool
                constexpr std::ptrdiff_t m_bPredictionEligible = 0x372; // bool
                constexpr std::ptrdiff_t m_bApplyLayerMatchIDToModel = 0x373; // bool
                constexpr std::ptrdiff_t m_tokLayerMatchID = 0x374; // CUtlStringToken
                constexpr std::ptrdiff_t m_nSubclassID = 0x378; // CUtlStringToken
                constexpr std::ptrdiff_t m_nSimulationTick = 0x388; // int32
                constexpr std::ptrdiff_t m_iCurrentThinkContext = 0x38C; // int32
                constexpr std::ptrdiff_t m_aThinkFunctions = 0x390; // CUtlVector<thinkfunc_t>
                constexpr std::ptrdiff_t m_bDisabledContextThinks = 0x3A8; // bool
                constexpr std::ptrdiff_t m_flAnimTime = 0x3AC; // float32
                constexpr std::ptrdiff_t m_flSimulationTime = 0x3B0; // float32
                constexpr std::ptrdiff_t m_nSceneObjectOverrideFlags = 0x3B4; // uint8
                constexpr std::ptrdiff_t m_bHasSuccessfullyInterpolated = 0x3B5; // bool
                constexpr std::ptrdiff_t m_bHasAddedVarsToInterpolation = 0x3B6; // bool
                constexpr std::ptrdiff_t m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x3B7; // bool
                constexpr std::ptrdiff_t m_nInterpolationLatchDirtyFlags = 0x3B8; // int32[2]
                constexpr std::ptrdiff_t m_ListEntry = 0x3C0; // uint16[11]
                constexpr std::ptrdiff_t m_flCreateTime = 0x3D8; // GameTime_t
                constexpr std::ptrdiff_t m_flSpeed = 0x3DC; // float32
                constexpr std::ptrdiff_t m_EntClientFlags = 0x3E0; // uint16
                constexpr std::ptrdiff_t m_bClientSideRagdoll = 0x3E2; // bool
                constexpr std::ptrdiff_t m_iTeamNum = 0x3E3; // uint8
                constexpr std::ptrdiff_t m_spawnflags = 0x3E4; // uint32
                constexpr std::ptrdiff_t m_nNextThinkTick = 0x3E8; // GameTick_t
                constexpr std::ptrdiff_t m_fFlags = 0x3EC; // uint32
                constexpr std::ptrdiff_t m_vecAbsVelocity = 0x3F0; // Vector
                constexpr std::ptrdiff_t m_vecVelocity = 0x400; // CNetworkVelocityVector
                constexpr std::ptrdiff_t m_vecBaseVelocity = 0x430; // Vector
                constexpr std::ptrdiff_t m_hEffectEntity = 0x43C; // CHandle<C_BaseEntity>
                constexpr std::ptrdiff_t m_hOwnerEntity = 0x440; // CHandle<C_BaseEntity>
                constexpr std::ptrdiff_t m_MoveCollide = 0x444; // MoveCollide_t
                constexpr std::ptrdiff_t m_MoveType = 0x445; // MoveType_t
                constexpr std::ptrdiff_t m_nActualMoveType = 0x446; // MoveType_t
                constexpr std::ptrdiff_t m_flWaterLevel = 0x448; // float32
                constexpr std::ptrdiff_t m_fEffects = 0x44C; // uint32
                constexpr std::ptrdiff_t m_hGroundEntity = 0x450; // CHandle<C_BaseEntity>
                constexpr std::ptrdiff_t m_nGroundBodyIndex = 0x454; // int32
                constexpr std::ptrdiff_t m_flFriction = 0x458; // float32
                constexpr std::ptrdiff_t m_flElasticity = 0x45C; // float32
                constexpr std::ptrdiff_t m_flGravityScale = 0x460; // float32
                constexpr std::ptrdiff_t m_flTimeScale = 0x464; // float32
                constexpr std::ptrdiff_t m_bAnimatedEveryTick = 0x468; // bool
                constexpr std::ptrdiff_t m_flNavIgnoreUntilTime = 0x46C; // GameTime_t
                constexpr std::ptrdiff_t m_hThink = 0x470; // uint16
                constexpr std::ptrdiff_t m_fBBoxVisFlags = 0x480; // uint8
                constexpr std::ptrdiff_t m_bPredictable = 0x481; // bool
                constexpr std::ptrdiff_t m_bRenderWithViewModels = 0x482; // bool
                constexpr std::ptrdiff_t m_nSplitUserPlayerPredictionSlot = 0x484; // CSplitScreenSlot
                constexpr std::ptrdiff_t m_nFirstPredictableCommand = 0x488; // int32
                constexpr std::ptrdiff_t m_nLastPredictableCommand = 0x48C; // int32
                constexpr std::ptrdiff_t m_hOldMoveParent = 0x490; // CHandle<C_BaseEntity>
                constexpr std::ptrdiff_t m_Particles = 0x498; // CParticleProperty
                constexpr std::ptrdiff_t m_vecPredictedScriptFloats = 0x4C0; // CUtlVector<float32>
                constexpr std::ptrdiff_t m_vecPredictedScriptFloatIDs = 0x4D8; // CUtlVector<int32>
                constexpr std::ptrdiff_t m_nNextScriptVarRecordID = 0x508; // int32
                constexpr std::ptrdiff_t m_vecAngVelocity = 0x518; // QAngle
                constexpr std::ptrdiff_t m_DataChangeEventRef = 0x524; // int32
                constexpr std::ptrdiff_t m_dependencies = 0x528; // CUtlVector<CEntityHandle>
                constexpr std::ptrdiff_t m_nCreationTick = 0x540; // int32
                constexpr std::ptrdiff_t m_bAnimTimeChanged = 0x54D; // bool
                constexpr std::ptrdiff_t m_bSimulationTimeChanged = 0x54E; // bool
                constexpr std::ptrdiff_t m_sUniqueHammerID = 0x558; // CUtlString
                constexpr std::ptrdiff_t m_nBloodType = 0x560; // BloodType
            }
        namespace C_CSPlayerPawnBase {
                constexpr std::ptrdiff_t m_pPingServices = 0x1360; // CCSPlayer_PingServices*
                constexpr std::ptrdiff_t m_pViewModelServices = 0x1368; // CPlayer_ViewModelServices*
                constexpr std::ptrdiff_t m_fRenderingClipPlane = 0x1370; // float32[4]
                constexpr std::ptrdiff_t m_nLastClipPlaneSetupFrame = 0x1380; // int32
                constexpr std::ptrdiff_t m_vecLastClipCameraPos = 0x1384; // Vector
                constexpr std::ptrdiff_t m_vecLastClipCameraForward = 0x1390; // Vector
                constexpr std::ptrdiff_t m_bClipHitStaticWorld = 0x139C; // bool
                constexpr std::ptrdiff_t m_bCachedPlaneIsValid = 0x139D; // bool
                constexpr std::ptrdiff_t m_pClippingWeapon = 0x13A0; // C_CSWeaponBase*
                constexpr std::ptrdiff_t m_previousPlayerState = 0x13A8; // CSPlayerState
                constexpr std::ptrdiff_t m_iPlayerState = 0x13AC; // CSPlayerState
                constexpr std::ptrdiff_t m_bIsRescuing = 0x13B0; // bool
                constexpr std::ptrdiff_t m_fImmuneToGunGameDamageTime = 0x13B4; // GameTime_t
                constexpr std::ptrdiff_t m_fImmuneToGunGameDamageTimeLast = 0x13B8; // GameTime_t
                constexpr std::ptrdiff_t m_bGunGameImmunity = 0x13BC; // bool
                constexpr std::ptrdiff_t m_bHasMovedSinceSpawn = 0x13BD; // bool
                constexpr std::ptrdiff_t m_fMolotovUseTime = 0x13C0; // float32
                constexpr std::ptrdiff_t m_fMolotovDamageTime = 0x13C4; // float32
                constexpr std::ptrdiff_t m_iThrowGrenadeCounter = 0x13C8; // int32
                constexpr std::ptrdiff_t m_flLastSpawnTimeIndex = 0x13CC; // GameTime_t
                constexpr std::ptrdiff_t m_iProgressBarDuration = 0x13D0; // int32
                constexpr std::ptrdiff_t m_flProgressBarStartTime = 0x13D4; // float32
                constexpr std::ptrdiff_t m_vecIntroStartEyePosition = 0x13D8; // Vector
                constexpr std::ptrdiff_t m_vecIntroStartPlayerForward = 0x13E4; // Vector
                constexpr std::ptrdiff_t m_flClientDeathTime = 0x13F0; // GameTime_t
                constexpr std::ptrdiff_t m_bScreenTearFrameCaptured = 0x13F4; // bool
                constexpr std::ptrdiff_t m_flFlashBangTime = 0x13F8; // float32
                constexpr std::ptrdiff_t m_flFlashScreenshotAlpha = 0x13FC; // float32
                constexpr std::ptrdiff_t m_flFlashOverlayAlpha = 0x1400; // float32
                constexpr std::ptrdiff_t m_bFlashBuildUp = 0x1404; // bool
                constexpr std::ptrdiff_t m_bFlashDspHasBeenCleared = 0x1405; // bool
                constexpr std::ptrdiff_t m_bFlashScreenshotHasBeenGrabbed = 0x1406; // bool
                constexpr std::ptrdiff_t m_flFlashMaxAlpha = 0x1408; // float32
                constexpr std::ptrdiff_t m_flFlashDuration = 0x140C; // float32
                constexpr std::ptrdiff_t m_iHealthBarRenderMaskIndex = 0x1410; // int32
                constexpr std::ptrdiff_t m_flHealthFadeValue = 0x1414; // float32
                constexpr std::ptrdiff_t m_flHealthFadeAlpha = 0x1418; // float32
                constexpr std::ptrdiff_t m_flDeathCCWeight = 0x1428; // float32
                constexpr std::ptrdiff_t m_flPrevRoundEndTime = 0x142C; // float32
                constexpr std::ptrdiff_t m_flPrevMatchEndTime = 0x1430; // float32
                constexpr std::ptrdiff_t m_angEyeAngles = 0x1438; // QAngle
                constexpr std::ptrdiff_t m_fNextThinkPushAway = 0x1450; // float32
                constexpr std::ptrdiff_t m_bShouldAutobuyDMWeapons = 0x1454; // bool
                constexpr std::ptrdiff_t m_bShouldAutobuyNow = 0x1455; // bool
                constexpr std::ptrdiff_t m_iIDEntIndex = 0x1458; // CEntityIndex
                constexpr std::ptrdiff_t m_delayTargetIDTimer = 0x1460; // CountdownTimer
                constexpr std::ptrdiff_t m_iTargetItemEntIdx = 0x1478; // CEntityIndex
                constexpr std::ptrdiff_t m_iOldIDEntIndex = 0x147C; // CEntityIndex
                constexpr std::ptrdiff_t m_holdTargetIDTimer = 0x1480; // CountdownTimer
                constexpr std::ptrdiff_t m_flCurrentMusicStartTime = 0x149C; // float32
                constexpr std::ptrdiff_t m_flMusicRoundStartTime = 0x14A0; // float32
                constexpr std::ptrdiff_t m_bDeferStartMusicOnWarmup = 0x14A4; // bool
                constexpr std::ptrdiff_t m_cycleLatch = 0x14A8; // int32
                constexpr std::ptrdiff_t m_serverIntendedCycle = 0x14AC; // float32
                constexpr std::ptrdiff_t m_flLastSmokeOverlayAlpha = 0x14B0; // float32
                constexpr std::ptrdiff_t m_flLastSmokeAge = 0x14B4; // float32
                constexpr std::ptrdiff_t m_vLastSmokeOverlayColor = 0x14B8; // Vector
                constexpr std::ptrdiff_t m_nPlayerSmokedFx = 0x14C4; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nPlayerInfernoBodyFx = 0x14C8; // ParticleIndex_t
                constexpr std::ptrdiff_t m_nPlayerInfernoFootFx = 0x14CC; // ParticleIndex_t
                constexpr std::ptrdiff_t m_flNextMagDropTime = 0x14D0; // float32
                constexpr std::ptrdiff_t m_nLastMagDropAttachmentIndex = 0x14D4; // int32
                constexpr std::ptrdiff_t m_vecLastAliveLocalVelocity = 0x14D8; // Vector
                constexpr std::ptrdiff_t m_bGuardianShouldSprayCustomXMark = 0x1500; // bool
                constexpr std::ptrdiff_t m_hOriginalController = 0x1508; // CHandle<CCSPlayerController>
            }
}
